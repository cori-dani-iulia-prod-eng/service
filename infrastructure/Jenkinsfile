pipeline {
    agent any
        tools {
        jdk 'JDK 21' // This name must match the JDK installation name used in Jenkins Global Tool Configuration
    }
    environment {
        DOCKER_PASSWORD = credentials("docker_password")
        GITHUB_TOKEN = credentials("github_token")
    }

    stages {
        stage('Build & Test') {
            steps {
                sh 'chmod +x gradlew'
                sh './gradlew clean build'
            }
        }
        stage('Tag image') {
          steps {
            script {
               sh([script: 'git fetch --tag', returnStdout: true]).trim()
               env.MAJOR_VERSION = sh([script: 'git tag | sort --version-sort | tail -1 | cut -d . -f 1', returnStdout: true]).trim()
               env.MINOR_VERSION = sh([script: 'git tag | sort --version-sort | tail -1 | cut -d . -f 2', returnStdout: true]).trim()
               env.PATCH_VERSION = sh([script: 'git tag | sort --version-sort | tail -1 | cut -d . -f 3', returnStdout: true]).trim()
               def nextMinorVersion = (env.MINOR_VERSION.toInteger() + 1)
               env.IMAGE_TAG = "${env.MAJOR_VERSION}.${nextMinorVersion}.${env.PATCH_VERSION}"
            }
            sh "docker build -t iuliastaci/hello-img:${env.IMAGE_TAG} ."
          }
        }
        
        stage('Publish image') {
            steps {
            sh "docker login docker.io -u iuliastaci -p ${DOCKER_PASSWORD}"
            sh "docker push iuliastaci/hello-img:${env.IMAGE_TAG}"
            sh "git tag ${env.IMAGE_TAG}"
            sh "git push https://$GITHUB_TOKEN@github.com/cori-dani-iulia-prod-eng/service.git ${env.IMAGE_TAG}"
            }
        }

        stage('Run image') {
            steps {
                script {
                    withEnv(["IMAGE_TAG=${env.IMAGE_TAG}"]) {
                        sh 'docker compose up -d hello mongo'
                    }
                }
            }
        }
        
        stage('Run integration tests') {
            steps {
                sh "./gradlew testIT"
            }
        }
    }

    post {
        always {
            publishHTML([
                reportDir: 'build/reports/tests/testIT',
                reportFiles: 'index.html',
                reportName: 'Integration Test Report'
            ])
        }
    }
}
